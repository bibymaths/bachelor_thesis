library(shiny); source('WBDEGS.R')
library(shiny); source('WBDEGS.R')
source("http://bioconductor.org/biocLite.R")
biocLite("GEOquery")
library(GEOquery)
gse <- getGEO("GSE29438", GSEMatrix = TRUE)
show(gse)
Table(gse)
library(GEOquery)
gse <- getGEO("GSE29438", GSEMatrix = TRUE)
library(readr)
GSE29438_family <- read_csv("E:/College/R/GSE29438_family.soft")
View(GSE29438_family)
source("http://bioconductor.org/biocLite.R")
biocLite("GEOquery")
library("GEOquery", lib.loc="~/R/win-library/3.3")
gse29438 <- getGEO('GSE29438', destdir=".")
gse29438 <- getGEO(filename = 'GSE29438_series_matrix.txt.gz')
setwd("G:\prostate cancer 8 sem\mTOR")
library(GEOquery)
getGEOSuppFiles("GSE49232")
getGEOSuppFiles("GSE35469")
getGEOSuppFiles("GSE84868")
getGEOSuppFiles("GSE32875")
getGEOSuppFiles("GSE26332")
library(shiny); source('WBDEGS.R')
source('WBDEGS.R')
source('WBDEGS.R')
source('WBDEGS.R')
library(readr)
MatrixGE <- read_csv("E:/College/R/AR/GSE67537/MatrixGE.txt")
View(MatrixGE)
library(shiny); source('WBDEGS.R')
library(shiny); source('WBDEGS.R')
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("GenomicFeatures", "AnnotationDbi"))
library(readr)
MatrixGE_filter <- read_csv("E:/College/R/AR/GSE8702/MatrixGE_filter.txt")
View(MatrixGE_filter)
my data <- View(MatrixGE_filter)
data <- View(MatrixGE_filter)
fit <- princomp(data, cor=TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
pca <- princomp(data[-5])
library(readr)
Iris <- read_csv("E:/Iris.csv")
View(Iris)
Iris
irispca<-princomp(iris[-5])
summary(irispca)
irispca$loadings
irispca$scores
Iris
irispca<-princomp(iris[-5])
summary(irispca)
irispca$loadings
irispca$scores
sink()
biplot(irispca)
cols <- c('red', 'blue', 'green')
with(iris
, plot(irispca$scores[,c(1,2)]
, col=cols[Species]
, pch=as.numeric(Species)))
install.packages("vegan")
library("vegan")
iris.c <- scale(iris[ ,1:4])
pca <- rda(iris.c)
plot(pca, type = 'n', display = 'sites')
points(pca, display='sites', col = cols[iris$Species], pch = 16)
ordihull(pca, groups=iris$Species)
ordispider(pca, groups = iris$Species, label = TRUE)
pairs(iris)
library(ggplot2)
#Plotting the dependent variable distribution
pl1 <- ggplot(Iris, aes(Species))
pl1 + geom_density(fill = "red", alpha = "0.7")
pl2 <- ggplot(Iris, aes(SepalLength))
pl2 + geom_density(fill = "red", alpha = "0.7")
pl2
coloumns(Iris)
colnames(Iris)
pl2 <- ggplot(Iris, aes(SepalLengthCm))
pl2 + geom_density(fill = "red", alpha = "0.7")
pl3 <- ggplot(Iris, aes(SepalWidthCm))
pl3 + geom_density(fill = "red", alpha = "0.7")
pl4 <- ggplot(Iris, aes(PetalLengthCm))
pl4 + geom_density(fill = "red", alpha = "0.7")
pl5 <- ggplot(Iris, aes(PetalWidthCm))
pl5 + geom_density(fill = "red", alpha = "0.7")
str(Iris)
is.na(Iris)
Iris
aa <- c(3,5,3,4,6,5,1,8,3,2,4,5,3,6,4,2,4)
length(aa)
mean(aa)
var(aa)
range(aa)
hist(aa)
cc = aa[aa>3]
cc
power(4^2)
power(64)
library(shiny); source('WBDEGS.R')
2 + 2
@/2
x <- c(tully, moti, chuppy)
x <- c('tully', 'moti', 'chuppy')
x
max(x)
mat <- matrix((1,2,3,4,5,6,7,8,9), 3,3)
matrix(x)
u <- matrix(x)
u[1,]
u[2,]
u[3,]
library(shiny); source('WBDEGS.R')
library(shiny); source('WBDEGS.R')
install.packages(c("DBI", "Rcpp", "readr", "stringi"))
install.packages(c("DBI", "Rcpp", "readr", "stringi"))
install.packages(c("DBI", "Rcpp", "readr", "stringi"))
library(shiny)
library(shiny)
runApp("WB_Degs")
library("shiny", lib.loc="~/R/win-library/3.3")
detach("package:shiny", unload=TRUE)
library("shiny", lib.loc="~/R/win-library/3.3")
remove.packages("shiny", lib="~/R/win-library/3.3")
library(shiny)
runApp("WB_Degs")
install.packages("shiny")
library(shiny)
runApp("WB_Degs")
library(shiny); source('WBDEGS.R')
library("annotate", lib.loc="~/R/win-library/3.3")
library(shiny); source('WBDEGS.R')
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("mygene")
browseVignettes("mygene")
library("mygene", lib.loc="~/R/win-library/3.3")
query(q="il1b", size=5)
library(readr)
gene <- read_delim("C:/Users/abhinav/Desktop/gene.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(gene)
q <- View(gene)
is.vector(q)
unlist(q)
is.vector(q)
p <- unlist(q)
p
library(readxl)
graph <- read_excel("C:/Users/abhinav/Desktop/graph.xlsx")
View(graph)
plot(graph$T, graph$y)
y = 719.23exp(0.1361x)
y = 719.23*exp(0.1361*x)
graph$y = 719.23*exp(0.1361*graph$T)
plot(graph$T, graph$y)
predict(graph$y)
graph$y = 751/1 + 50*exp(0.67*graph$T)
graph$y = 751/(1 + 50*exp(0.67*graph$T))
plot(graph$T, graph$y)
graph$y = 800/(1 + 50*exp(0.67*graph$T))
plot(graph$T, graph$y)
getwd
getwd()
source("http://bioconductor.org/biocLite.R")
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
library("seqinr")
install.packages("seqinr")
library("seqinr")
virus <- read.fasta(file = "sequence.fasta")
#Reading .fasta file for virus Hepatitis C
virusseq <- virus[[1]]
#Storing the sequence
length(virusseq)
#Calculating the length of the virus
table(virusseq)
#Calculating the A/C/G/T districution over the sequence
GC(virusseq)
#Calculating the GC-content
GC(virusseq[1:400])
GC(virusseq[401:800])
GC(virusseq[801:1200])
GC(virusseq[1201:1600])
GC(virusseq[1601:2000])
GC(virusseq[2001:2499])
#sliding GC Window
for (i in 1:n) {
chunk <- virusseq[starts[i]:(starts[i]+1999)]
chunkGC <- GC(chunk)
print(chunkGC)
chunkGCs[i] <- chunkGC
}
plot(starts,chunkGCs,type="b",xlab="Nucleotide start position",ylab="GC content")
for (i in 1:n) {
+     chunk <- virusseq[starts[i]:(starts[i]+200)]
+     chunkGC <- GC(chunk)
+     print(chunkGC)
+     chunkGCs[i] <- chunkGC }
library("BiocInstaller", lib.loc="~/R/win-library/3.2")
source("http://bioconductor.org/biocLite.R")
#Installing package "Biostrings"
biocLite("Biostrings")
virusseq <- virus[[1]]
length(virusseq)
table(virusseq)
GC(virusseq)
GC(virusseq[1:400])
GC(virusseq[401:800])
GC(virusseq[801:1200])
GC(virusseq[1201:1600])
GC(virusseq[1601:2000])
GC(virusseq[2001:2499])
for (i in 1:n) {
chunk <- virusseq[starts[i]:(starts[i]+1999)]
chunkGC <- GC(chunk)
print(chunkGC)
chunkGCs[i] <- chunkGC
}
plot(starts,chunkGCs,type="b",xlab="Nucleotide start position",ylab="GC content")
for (i in 1:n) {
+     chunk <- virusseq[starts[i]:(starts[i]+200)]
+     chunkGC <- GC(chunk)
+     print(chunkGC)
+     chunkGCs[i] <- chunkGC }
chunkGC <- GC(chunk)
print(chunkGC)
chunkGCs[i] <- chunkGC
for (i in 1:n) {
chunk <- virusseq[starts[i]:(starts[i]+1999)]
chunkGC <- GC(chunk)
print(chunkGC)
chunkGCs[i] <- chunkGC
}
plot(starts,chunkGCs,type="b",xlab="Nucleotide start position",ylab="GC content")
for (i in 1:n) {
+     chunk <- virusseq[starts[i]:(starts[i]+200)]
+     chunkGC <- GC(chunk)
+     print(chunkGC)
+     chunkGCs[i] <- chunkGC }
library("BiocInstaller", lib.loc="~/R/win-library/3.2")
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
require(Biostrings)
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = TRUE)
sigma
seq1 <- "ATTGGTCC"
seq2 <- "ATAGTCC"
globalAligns1s2 <- pairwiseAlignment(seq1, seq2, substitutionMatrix = sigma, gapOpening = -2,
gapExtension = -8, scoreOnly = FALSE)
globalAligns1s2
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE14245", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
fvarLabels(gset) <- make.names(fvarLabels(gset))
gsms <- "000000000000111111111111"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
library(Biobase)
library(GEOquery)
gset <- getGEO("GSE14245", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
gsms <- "000000000000111111111111"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")  set group names
ex <- exprs(gset)[ , order(sml)]
sml <- sml[order(sml)]
fl <- as.factor(sml)
labels <- c("test","control")
palette(c("#dfeaf4","#f4dfdf", "#AABBCC"))
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE14245", '/', annotation(gset), " selected samples", sep ='')
dev.new(width=4+dim(gset)[[2]]/5, height=6)
par(mar=c(2+round(max(nchar(sampleNames(gset)))/2),4,2,1))
title <- paste ("GSE14245", '/', annotation(gset), " selected samples", sep ='')
boxplot(ex, boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=fl)
legend("topleft", labels, fill=palette(), bty="n")
devtools::install_github("rstudio/addinexamples", type = "source")
install.packages("devtools")
devtools::install_github("rstudio/addinexamples", type = "source")
devtools::install_github("rstudio/addinexamples", type = "source")
